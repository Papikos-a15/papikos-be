package id.ac.ui.cs.advprog.papikosbe.model.transaction;

import id.ac.ui.cs.advprog.papikosbe.factory.DefaultPaymentFactory;
import id.ac.ui.cs.advprog.papikosbe.factory.PaymentFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class PaymentTest {
    UUID userId;
    UUID ownerId;
    PaymentFactory paymentFactory;

    @BeforeEach
    void setUp() {
        userId = UUID.randomUUID();
        ownerId = UUID.randomUUID();
        paymentFactory = new DefaultPaymentFactory();
    }

    @Test
    void testCreatePaymentSuccess() {
        Payment payment = paymentFactory.createPayment(userId, ownerId, new BigDecimal("150.00"));

        assertNotNull(payment);
        assertNotNull(payment.getId());  // ID generated by factory
        assertEquals(userId, payment.getUserId());
        assertEquals(ownerId, payment.getOwnerId());
        assertEquals(new BigDecimal("150.00"), payment.getAmount());
        assertNotNull(payment.getTimestamp());
    }

    @Test
    void testCreatePaymentZeroOrNegativeAmount() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            paymentFactory.createPayment(userId, ownerId, new BigDecimal("-10.00"));
        });
        assertEquals("Payment amount must be positive", exception.getMessage());

        exception = assertThrows(IllegalArgumentException.class, () -> {
            paymentFactory.createPayment(userId, ownerId, BigDecimal.ZERO);
        });
        assertEquals("Payment amount must be positive", exception.getMessage());
    }
}
